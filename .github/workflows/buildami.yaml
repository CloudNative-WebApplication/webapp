name: Build AMI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Test MySQL Connection
        run: |
          mysql -h 127.0.0.1 -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -D ${{ secrets.MYSQL_DATABASE }} -e "SHOW DATABASES;"

      - name: Run Integration Tests in the Background
        run: npx mocha tests/test.js &

      - name: Create Zip File
        run: |
          rm -r node_modules
          zip -r codefile.zip .

      - name: Upload Zip File
        uses: actions/upload-artifact@v2
        with:
          name: codezip
          path: codefile.zip

      - name: Install Packer plugin
        run: packer plugins install github.com/hashicorp/amazon

        
      - name: Build AMI and store ID
        run: |
          packer build -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
                       -var "source_ami=${{ secrets.SOURCE_AMI }}" \
                       -var "aws_region=${{ secrets.AWS_REGION }}" \
                       -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                       -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
                       ami.pkr.hcl | sudo tee output.txt
          tail -2 output.txt | head -2 | awk 'match($0, /ami-.*/) { print substr($0, RSTART, RLENGTH) }' >> ami.txt
          
      - name: Verify Contents of ami.txt
        run: |
          cat ami.txt  # Display contents of ami.txt for debugging

      - name: Use Demo Account's AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          AMI_ID=$(cat ami.txt)
          LAUNCH_TEMPLATE_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[?starts_with(LaunchTemplateName, `launchTemplate`) == `true`].LaunchTemplateName' --output text)
          echo "AMI_ID: $AMI_ID"  # Debugging output
          echo "Launch Template Name: $LAUNCH_TEMPLATE_NAME"  # Debugging output
          aws ec2 create-launch-template-version --launch-template-name $LAUNCH_TEMPLATE_NAME --version-description latest --source-version 1 --launch-template-data "ImageId=$AMI_ID"

      - name: Get Launch Template Name
        run: |
          LAUNCH_TEMPLATE_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[?starts_with(LaunchTemplateName, `launchTemplate`) == `true`].LaunchTemplateName' --output text)
          echo "Launch Template Name: $LAUNCH_TEMPLATE_NAME"  # Debugging output

      - name: Create New Launch Template Version
        run: |
          AMI_ID=$(cat ami.txt)
          LAUNCH_TEMPLATE_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[?starts_with(LaunchTemplateName, `launchTemplate`) == `true`].LaunchTemplateName' --output text)
          echo "AMI_ID: $AMI_ID"  # Debugging output
          echo "Launch Template Name: $LAUNCH_TEMPLATE_NAME"  # Debugging output
          aws ec2 create-launch-template-version --launch-template-name $LAUNCH_TEMPLATE_NAME --version-description latest --source-version 1 --launch-template-data "ImageId=$AMI_ID"




      
